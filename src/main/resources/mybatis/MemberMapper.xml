<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
      "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.daCoffee.dao.MemberDAO">
  <resultMap type="memberDTO" id="memberMap">
      <id column="member_id" property="memberId" />
      <result column="member_name" property="memberName" typeHandler="encryptionTypeHandler"/>
      <result column="member_company_name" property="memberCompanyName" />
      <result column="member_password" property="memberPassword" />
      <result column="member_tel" property="memberTel" typeHandler="encryptionTypeHandler"/>
      <result column="member_company_tel" property="memberCompanyTel" />
      <result column="member_address" property="memberAddress" typeHandler="encryptionTypeHandler"/>
      <result column="member_detail_address" property="memberDetailAddress" typeHandler="encryptionTypeHandler"/>
      <result column="member_delivery_address" property="memberDeliveryAddress" typeHandler="encryptionTypeHandler"/>
      <result column="member_detail_delivery_address" property="memberDetailDeliveryAddress" typeHandler="encryptionTypeHandler"/>
      <result column="member_email" property="memberEmail" typeHandler="encryptionTypeHandler"/>
      <result column="member_file" property="memberFile" />
      <result column="member_fran_code" property="memberFranCode" />
      <result column="member_tier" property="memberTier" />
      <result column="member_date" property="memberDate" />
      <result column="member_disable" property="memberDisable" />
      <result column="member_disable_date" property="memberDisableDate" />
      <result column="member_modifier_name" property="memberModifierName" />
      <result column="member_modifier_date" property="memberModifierDate" />
      <result column="member_withdrawal_date" property="memberWithdrawalDate" />
  </resultMap>

  <insert id="memberInsert" parameterType="memberDTO">
      insert into member values (#{memberId}, #{memberName, typeHandler=encryptionTypeHandler}, #{memberCompanyName}, #{memberPassword},
                                 #{memberTel, typeHandler=encryptionTypeHandler}, #{memberCompanyTel}, #{memberAddress, typeHandler=encryptionTypeHandler},
                                 #{memberDetailAddress, typeHandler=encryptionTypeHandler}, #{memberDeliveryAddress, typeHandler=encryptionTypeHandler},
                                 #{memberDetailDeliveryAddress, typeHandler=encryptionTypeHandler}, #{memberEmail, typeHandler=encryptionTypeHandler},
                                 #{memberFile}, null, 0, NOW(), null, null, null)
  </insert>

  <select id="rownumSet" parameterType="int" resultType="int">
      set @rownum := 0
  </select>

  <select id="memberCount" parameterType="map" resultType="int">
      select count(*) from member
  </select>

  <select id="checkMember" parameterType="String" resultType="int">
    select count(*) from member where member_id = #{memberId}
  </select>

  <select id="checkDisabledMember" parameterType="String" resultType="int">
    select count(*) from member_disabled where member_id = #{memberId}
  </select>

  <select id="memberList" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        where member_tier != 0 order by member_tier ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListAll" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        ) b;
  </select>

  <select id="memberSelectOne" parameterType="map" resultMap="memberMap">
      select * from member where member_id = #{memberId}
  </select>

  <select id="disabledMemberSelectOne" parameterType="String" resultType="int">
    select count(*) from member_disabled where member_id = #{memberId}
  </select>

  <select id="memberFindId" parameterType="map" resultMap="memberMap">
      select member_id from member where member_name = #{memberName} and member_email = #{memberEmail, typeHandler=encryptionTypeHandler}
  </select>

  <select id="memberFindPassword" parameterType="map" resultType="String">
      select member_password from member where member_id = #{memberId} and member_email = #{memberEmail, typeHandler=encryptionTypeHandler}
  </select>

  <select id="memberListByMemberCompanyName" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_company_name ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListDescByMemberCompanyName" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_company_name desc ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListByMemberFranCode" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_fran_code ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListDescByMemberFranCode" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_fran_code desc ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListByMemberId" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_id ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListDescByMemberId" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_id desc ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListByMemberName" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_name ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListDescByMemberName" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_name desc ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListByMemberTel" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_tel ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListDescByMemberTel" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_tel desc ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListByMemberCompanyTel" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_company_tel ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListDescByMemberCompanyTel" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_company_tel desc ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListByMemberTier" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_tier ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListDescByMemberTier" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_tier desc ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListByMemberDate" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_date ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListDescByMemberDate" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_date desc ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListByMemberDisable" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_disable ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberListDescByMemberDisable" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        order by member_disable desc ) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberSearchListByMemberCompanyName" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        where member_company_name LIKE CONCAT('%',#{searchText},'%')) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberSearchListByMemberFranCode" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        where member_fran_code LIKE CONCAT('%',#{searchText},'%')) b
      where b.rownum between #{start} and #{end};
  </select>

<select id="memberSearchListByMemberFranCodeByNull" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        where member_fran_code IS NULL ) b
      where b.rownum between #{start} and #{end};
</select>


<select id="memberSearchListByMemberId" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        where member_id LIKE CONCAT('%',#{searchText},'%')) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberSearchListByMemberName" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        where member_name LIKE CONCAT('%',#{searchText},'%')) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberSearchListByMemberTel" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        where member_tel LIKE CONCAT('%',#{searchText},'%')) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberSearchListByMemberCompanyTel" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        where member_company_tel LIKE CONCAT('%',#{searchText},'%')) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberSearchListByMemberTier" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member a, (select @rownum := 0) tmp
        where member_tier LIKE CONCAT('%',#{searchText},'%')) b
      where b.rownum between #{start} and #{end};
  </select>

  <select id="memberSearchListByMemberDisable" parameterType="map" resultMap="memberMap">
      select * from (
        select ( @rownum := @rownum + 1 ) as rownum,
        a.* from member_disabled a, (select @rownum := 0) tmp ) b
      where b.rownum between #{start} and #{end};
  </select>

  <update id="memberTempPasswordUpdate" parameterType="map">
      update member set member_password = #{memberTempPassword} where member_id = #{memberId}
  </update>

  <update id="memberTierUpdate" parameterType="map">
      update member set member_tier = #{memberTier} where member_id = #{memberId}
  </update>

  <update id="memberFranCodeUpdate" parameterType="map">
    update member set member_fran_code = #{memberFranCode} where member_id = #{memberId}
  </update>

  <update id="memberUpdate" parameterType="memberDTO">
      update member set member_name = #{memberName, typeHandler=encryptionTypeHandler}, member_company_name = #{memberCompanyName}, member_password = #{memberPassword},
                        member_tel = #{memberTel, typeHandler=encryptionTypeHandler}, member_company_tel = #{memberCompanyTel},
                        member_address = #{memberAddress, typeHandler=encryptionTypeHandler}, member_detail_address = #{memberDetailAddress, typeHandler=encryptionTypeHandler},
                        member_delivery_address = #{memberDeliveryAddress, typeHandler=encryptionTypeHandler}, member_detail_delivery_address = #{memberDetailDeliveryAddress, typeHandler=encryptionTypeHandler},
                        member_email = #{memberEmail, typeHandler=encryptionTypeHandler}, member_file = #{memberFile}
      where member_id = #{memberId}
  </update>

  <update id="memberUpdateNotPassword" parameterType="memberDTO">
      update member set member_name = #{memberName, typeHandler=encryptionTypeHandler}, member_company_name = #{memberCompanyName},
                        member_tel = #{memberTel, typeHandler=encryptionTypeHandler}, member_company_tel = #{memberCompanyTel},
                        member_address = #{memberAddress, typeHandler=encryptionTypeHandler},  member_detail_address = #{memberDetailAddress, typeHandler=encryptionTypeHandler},
                        member_delivery_address = #{memberDeliveryAddress,typeHandler=encryptionTypeHandler}, member_detail_delivery_address = #{memberDetailDeliveryAddress, typeHandler=encryptionTypeHandler},
                        member_email = #{memberEmail, typeHandler=encryptionTypeHandler}, member_file = #{memberFile}
      where member_id = #{memberId}
  </update>

<update id="memberAdminUpdate" parameterType="memberDTO">
  update member set member_name = #{memberName, typeHandler=encryptionTypeHandler}, member_company_name = #{memberCompanyName},
                    member_tel = #{memberTel, typeHandler=encryptionTypeHandler}, member_company_tel = #{memberCompanyTel},
                    member_address = #{memberAddress, typeHandler=encryptionTypeHandler}, member_detail_address = #{memberDetailAddress, typeHandler=encryptionTypeHandler},
                    member_delivery_address = #{memberDeliveryAddress, typeHandler=encryptionTypeHandler}, member_detail_delivery_address = #{memberDetailDeliveryAddress, typeHandler=encryptionTypeHandler},
                    member_email = #{memberEmail, typeHandler=encryptionTypeHandler}, member_fran_code = #{memberFranCode}, member_tier = #{memberTier},
                    member_modifier_name = #{memberModifierName}, member_modifier_date = NOW()
  where member_id = #{memberId}
</update>

  <insert id="memberWithdrawal" parameterType="String">
      insert into member_withdrawal (member_id, member_company_name, member_tel, member_company_tel, member_withdrawal_date)
      select member_id, member_company_name, member_tel, member_company_tel, NOW() from member where member_id = #{memberId}
  </insert>

<select id="memberWithdrawalList" parameterType="map" resultMap="memberMap">
  select * from (
      select ( @rownum := @rownum + 1 ) as rownum,
      a.* from member_withdrawal a, (select @rownum := 0) tmp
      ) b
  where b.rownum between #{start} and #{end};
</select>

<select id="memberWithdrawalCount" parameterType="map" resultType="int">
  select count(*) from member_withdrawal
</select>

<select id="memberDisableSelectOne" parameterType="map" resultMap="memberMap">
  select * from member_disabled where member_id = #{memberId}
</select>

<insert id="memberDisable" parameterType="String">
  insert into member_disabled select * from member where member_id = #{memberId}
</insert>

<insert id="memberEnable" parameterType="String">
  insert into member select * from member_disabled where member_id = #{memberId}
</insert>

<delete id="memberDelete" parameterType="string">
      delete from member where member_id = #{memberId}
</delete>

<delete id="disabledMemberDelete" parameterType="string">
  delete from member_disabled where member_id = #{memberId}
</delete>

<update id="updateDisabledDate" parameterType="String">
  update member_disabled set member_disable_date = now() where member_id = #{memberId}
</update>

<update id="updateDisabledDateToNull" parameterType="String">
  update member set member_disable_date = null where member_id = #{memberId}
</update>

</mapper>